{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3880a014-f39b-4f13-83b1-b54d383138f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Model and vectorizer saved successfully!\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "import joblib\n",
    "\n",
    "# ✅ Load your data from extracted folder\n",
    "fake = pd.read_csv(r\"C:\\Users\\melha\\Downloads\\archive\\Fake.csv\")\n",
    "true = pd.read_csv(r\"C:\\Users\\melha\\Downloads\\archive\\True.csv\")\n",
    "\n",
    "# ✅ Label the data\n",
    "fake[\"label\"] = 0\n",
    "true[\"label\"] = 1\n",
    "\n",
    "data = pd.concat([fake, true])\n",
    "data = data[[\"text\", \"label\"]]\n",
    "\n",
    "# ✅ Split the dataset\n",
    "X_train, X_test, y_train, y_test = train_test_split(data[\"text\"], data[\"label\"], test_size=0.2, random_state=42)\n",
    "\n",
    "# ✅ Vectorize text\n",
    "tfidf = TfidfVectorizer(stop_words='english', max_df=0.7)\n",
    "X_train_tfidf = tfidf.fit_transform(X_train)\n",
    "\n",
    "# ✅ Train model\n",
    "model = LogisticRegression()\n",
    "model.fit(X_train_tfidf, y_train)\n",
    "\n",
    "# ✅ Create the app folder if it doesn't exist\n",
    "os.makedirs(\"app\", exist_ok=True)\n",
    "\n",
    "# ✅ Save the model and vectorizer\n",
    "joblib.dump(model, \"app/model.pkl\")\n",
    "joblib.dump(tfidf, \"app/vectorizer.pkl\")\n",
    "\n",
    "print(\"✅ Model and vectorizer saved successfully!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "91c8f5ab-de91-473a-b663-79985ab0dd2c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['model.pkl']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import joblib\n",
    "joblib.dump(model, \"model.pkl\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3f15af54-e1cf-4352-a664-9d4bf57281f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model loaded successfully!\n"
     ]
    }
   ],
   "source": [
    "import joblib\n",
    "\n",
    "# Save the trained model\n",
    "joblib.dump(model, r\"C:\\Users\\melha\\Downloads\\app\\model.pkl\")\n",
    "\n",
    "# (Optional) Test loading\n",
    "model = joblib.load(r\"C:\\Users\\melha\\Downloads\\app\\model.pkl\")\n",
    "print(\"Model loaded successfully!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ee8d1a0e-2ab3-428d-a693-cf9a6e7d0bd3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model loaded successfully!\n",
      "Error loading vectorizer: \n"
     ]
    }
   ],
   "source": [
    "import joblib\n",
    "\n",
    "# Try loading the model\n",
    "try:\n",
    "    model = joblib.load(r\"C:\\Users\\melha\\Downloads\\app\\model.pkl\")\n",
    "    print(\"Model loaded successfully!\")\n",
    "except Exception as e:\n",
    "    print(f\"Error loading model: {e}\")\n",
    "\n",
    "# Try loading the vectorizer\n",
    "try:\n",
    "    vectorizer = joblib.load(r\"C:\\Users\\melha\\Downloads\\app\\vectorizer.pkl\")\n",
    "    print(\"Vectorizer loaded successfully!\")\n",
    "except Exception as e:\n",
    "    print(f\"Error loading vectorizer: {e}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "60eb7da9-0b21-4856-ab46-2f301b898380",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Model and vectorizer saved successfully!\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "import joblib\n",
    "\n",
    "# Load the dataset from your archive folder\n",
    "fake_df = pd.read_csv(r\"C:\\Users\\melha\\Downloads\\archive\\Fake.csv\")\n",
    "real_df = pd.read_csv(r\"C:\\Users\\melha\\Downloads\\archive\\True.csv\")\n",
    "\n",
    "# Label the data\n",
    "fake_df[\"label\"] = 0  # Fake news\n",
    "real_df[\"label\"] = 1  # Real news\n",
    "\n",
    "# Combine and shuffle\n",
    "df = pd.concat([fake_df, real_df])\n",
    "df = df.sample(frac=1, random_state=42).reset_index(drop=True)\n",
    "\n",
    "# Features and labels\n",
    "X = df[\"text\"]\n",
    "y = df[\"label\"]\n",
    "\n",
    "# Train/test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Vectorization\n",
    "vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)\n",
    "X_train_vec = vectorizer.fit_transform(X_train)\n",
    "\n",
    "# Model training\n",
    "model = LogisticRegression()\n",
    "model.fit(X_train_vec, y_train)\n",
    "\n",
    "# Save model and vectorizer\n",
    "joblib.dump(model, r\"C:\\Users\\melha\\Downloads\\app\\model.pkl\")\n",
    "joblib.dump(vectorizer, r\"C:\\Users\\melha\\Downloads\\app\\vectorizer.pkl\")\n",
    "\n",
    "print(\"✅ Model and vectorizer saved successfully!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "223f0e37-09ee-451c-a2eb-a7154c808b7f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc2c383e-af85-4b7e-aad2-90be5267b4bb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
